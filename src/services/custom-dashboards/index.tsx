/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, GetUsingFetchProps, mutateUsingFetch, MutateUsingFetchProps } from '../config'
export const SPEC_VERSION = '1.0.0'
export interface CloneDashboardRequestBody {
  dashboardId: string
  description?: string
  folderId?: string
  name?: string
}

export interface ClonedDashboardModel {
  description: string
  id: string
  resourceIdentifier: string
  title: string
}

export interface ClonedDashboardResponse {
  resource: ClonedDashboardModel
}

export interface CreateDashboardRequest {
  dashboardId?: number
  description?: string
  folderId: string
  name: string
}

export interface CreateDashboardResponse {
  resource?: number
}

export interface CreateFolderRequestBody {
  name: string
}

export interface CreateFolderResponse {
  resource: string
  responseMessages?: string
}

export interface ErrorFolderParameters {
  accountId?: string
  folderId?: string
  name?: string
}

export interface ErrorResponse {
  error?: string
  responseMessages?: string
}

export interface FolderChildren {
  id: string
  name: string
}

export interface FolderErrorResponse {
  error?: string
  resource?: ErrorFolderParameters
  responseMessages?: string
}

export interface FolderModel {
  Children?: FolderChildren
  child_count: number
  created_at: string
  id: string
  name: string
  title: string
  type: string
}

export interface GetFolderResponse {
  items?: number
  pages?: number
  resource?: FolderModel[]
  responseMessages?: string
}

export interface GetFoldersResponse {
  items: number
  pages: number
  resource?: FolderModel[]
  responseMessages?: string
}

export interface PatchFolderRequestBody {
  folderId: string
  name: string
}

export interface PatchFolderResponse {
  resource: PatchFolderResponseResource
}

export interface PatchFolderResponseResource {
  accountId: string
  folderId: string
  name: string
}

export interface UpdateDashboardResponse {
  resource: UpdateDashboardResponseResource
}

export interface UpdateDashboardResponseResource {
  description: string
  id: number
  resourceIdentifier: string
  title: string
}

export interface UpdateDashboardQueryParams {
  accountId: string
}

export type UpdateDashboardProps = Omit<
  MutateProps<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>,
  'path' | 'verb'
>

/**
 * Update a dashboards name, tags or folder.
 */
export const UpdateDashboard = (props: UpdateDashboardProps) => (
  <Mutate<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>
    verb="PATCH"
    path={`/`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseUpdateDashboardProps = Omit<
  UseMutateProps<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>,
  'path' | 'verb'
>

/**
 * Update a dashboards name, tags or folder.
 */
export const useUpdateDashboard = (props: UseUpdateDashboardProps) =>
  useMutate<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>('PATCH', `/`, {
    base: getConfig('dashboard/'),
    ...props
  })

/**
 * Update a dashboards name, tags or folder.
 */
export const updateDashboardPromise = (
  props: MutateUsingFetchProps<
    UpdateDashboardResponse,
    unknown,
    UpdateDashboardQueryParams,
    CreateDashboardRequest,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>(
    'PATCH',
    getConfig('dashboard/'),
    `/`,
    props,
    signal
  )

export interface CloneDashboardQueryParams {
  accountId: string
}

export type CloneDashboardProps = Omit<
  MutateProps<ClonedDashboardResponse, ErrorResponse, CloneDashboardQueryParams, CloneDashboardRequestBody, void>,
  'path' | 'verb'
>

/**
 * Clone a dashboard.
 */
export const CloneDashboard = (props: CloneDashboardProps) => (
  <Mutate<ClonedDashboardResponse, ErrorResponse, CloneDashboardQueryParams, CloneDashboardRequestBody, void>
    verb="POST"
    path={`/clone`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseCloneDashboardProps = Omit<
  UseMutateProps<ClonedDashboardResponse, ErrorResponse, CloneDashboardQueryParams, CloneDashboardRequestBody, void>,
  'path' | 'verb'
>

/**
 * Clone a dashboard.
 */
export const useCloneDashboard = (props: UseCloneDashboardProps) =>
  useMutate<ClonedDashboardResponse, ErrorResponse, CloneDashboardQueryParams, CloneDashboardRequestBody, void>(
    'POST',
    `/clone`,
    { base: getConfig('dashboard/'), ...props }
  )

/**
 * Clone a dashboard.
 */
export const cloneDashboardPromise = (
  props: MutateUsingFetchProps<
    ClonedDashboardResponse,
    ErrorResponse,
    CloneDashboardQueryParams,
    CloneDashboardRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ClonedDashboardResponse, ErrorResponse, CloneDashboardQueryParams, CloneDashboardRequestBody, void>(
    'POST',
    getConfig('dashboard/'),
    `/clone`,
    props,
    signal
  )

export interface GetFolderQueryParams {
  accountId: string
  pageSize?: number
  isAdmin?: boolean
  page?: number
}

export type GetFolderProps = Omit<GetProps<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>, 'path'>

/**
 * Get a folders details.
 */
export const GetFolder = (props: GetFolderProps) => (
  <Get<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>
    path={`/folder`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseGetFolderProps = Omit<UseGetProps<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>, 'path'>

/**
 * Get a folders details.
 */
export const useGetFolder = (props: UseGetFolderProps) =>
  useGet<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>(`/folder`, {
    base: getConfig('dashboard/'),
    ...props
  })

/**
 * Get a folders details.
 */
export const getFolderPromise = (
  props: GetUsingFetchProps<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>(
    getConfig('dashboard/'),
    `/folder`,
    props,
    signal
  )

export interface PatchFolderQueryParams {
  accountId: string
}

export type PatchFolderProps = Omit<
  MutateProps<PatchFolderResponse, FolderErrorResponse, PatchFolderQueryParams, PatchFolderRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a folder's name.
 */
export const PatchFolder = (props: PatchFolderProps) => (
  <Mutate<PatchFolderResponse, FolderErrorResponse, PatchFolderQueryParams, PatchFolderRequestBody, void>
    verb="PATCH"
    path={`/folder`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UsePatchFolderProps = Omit<
  UseMutateProps<PatchFolderResponse, FolderErrorResponse, PatchFolderQueryParams, PatchFolderRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a folder's name.
 */
export const usePatchFolder = (props: UsePatchFolderProps) =>
  useMutate<PatchFolderResponse, FolderErrorResponse, PatchFolderQueryParams, PatchFolderRequestBody, void>(
    'PATCH',
    `/folder`,
    { base: getConfig('dashboard/'), ...props }
  )

/**
 * Update a folder's name.
 */
export const patchFolderPromise = (
  props: MutateUsingFetchProps<
    PatchFolderResponse,
    FolderErrorResponse,
    PatchFolderQueryParams,
    PatchFolderRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<PatchFolderResponse, FolderErrorResponse, PatchFolderQueryParams, PatchFolderRequestBody, void>(
    'PATCH',
    getConfig('dashboard/'),
    `/folder`,
    props,
    signal
  )

export interface CreateFolderQueryParams {
  accountId: string
}

export type CreateFolderProps = Omit<
  MutateProps<CreateFolderResponse, ErrorResponse, CreateFolderQueryParams, CreateFolderRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create a new folder.
 */
export const CreateFolder = (props: CreateFolderProps) => (
  <Mutate<CreateFolderResponse, ErrorResponse, CreateFolderQueryParams, CreateFolderRequestBody, void>
    verb="POST"
    path={`/folder`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseCreateFolderProps = Omit<
  UseMutateProps<CreateFolderResponse, ErrorResponse, CreateFolderQueryParams, CreateFolderRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create a new folder.
 */
export const useCreateFolder = (props: UseCreateFolderProps) =>
  useMutate<CreateFolderResponse, ErrorResponse, CreateFolderQueryParams, CreateFolderRequestBody, void>(
    'POST',
    `/folder`,
    { base: getConfig('dashboard/'), ...props }
  )

/**
 * Create a new folder.
 */
export const createFolderPromise = (
  props: MutateUsingFetchProps<
    CreateFolderResponse,
    ErrorResponse,
    CreateFolderQueryParams,
    CreateFolderRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<CreateFolderResponse, ErrorResponse, CreateFolderQueryParams, CreateFolderRequestBody, void>(
    'POST',
    getConfig('dashboard/'),
    `/folder`,
    props,
    signal
  )

export interface GetFoldersQueryParams {
  page: number
  accountId: string
  pageSize: number
  searchTerm?: string
  sortBy?: string
}

export type GetFoldersProps = Omit<GetProps<GetFoldersResponse, ErrorResponse, GetFoldersQueryParams, void>, 'path'>

/**
 * Get a list of folders filtered by search parameters.
 */
export const GetFolders = (props: GetFoldersProps) => (
  <Get<GetFoldersResponse, ErrorResponse, GetFoldersQueryParams, void>
    path={`/v1/folders`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseGetFoldersProps = Omit<
  UseGetProps<GetFoldersResponse, ErrorResponse, GetFoldersQueryParams, void>,
  'path'
>

/**
 * Get a list of folders filtered by search parameters.
 */
export const useGetFolders = (props: UseGetFoldersProps) =>
  useGet<GetFoldersResponse, ErrorResponse, GetFoldersQueryParams, void>(`/v1/folders`, {
    base: getConfig('dashboard/'),
    ...props
  })

/**
 * Get a list of folders filtered by search parameters.
 */
export const getFoldersPromise = (
  props: GetUsingFetchProps<GetFoldersResponse, ErrorResponse, GetFoldersQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<GetFoldersResponse, ErrorResponse, GetFoldersQueryParams, void>(
    getConfig('dashboard/'),
    `/v1/folders`,
    props,
    signal
  )

export interface CreateDashboardQueryParams {
  accountId: string
}

export type CreateDashboardProps = Omit<
  MutateProps<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>,
  'path' | 'verb'
>

/**
 * Creates a new looker dashboard which will be empty.
 */
export const CreateDashboard = (props: CreateDashboardProps) => (
  <Mutate<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>
    verb="POST"
    path={`/v2/create`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseCreateDashboardProps = Omit<
  UseMutateProps<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>,
  'path' | 'verb'
>

/**
 * Creates a new looker dashboard which will be empty.
 */
export const useCreateDashboard = (props: UseCreateDashboardProps) =>
  useMutate<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>(
    'POST',
    `/v2/create`,
    { base: getConfig('dashboard/'), ...props }
  )

/**
 * Creates a new looker dashboard which will be empty.
 */
export const createDashboardPromise = (
  props: MutateUsingFetchProps<
    CreateDashboardResponse,
    unknown,
    CreateDashboardQueryParams,
    CreateDashboardRequest,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>(
    'POST',
    getConfig('dashboard/'),
    `/v2/create`,
    props,
    signal
  )
